<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
				backgroundColor="white"
				paddingBottom="2"
				paddingLeft="2"
				paddingRight="2"
				paddingTop="2"
				xmlns:resources="resources.*"
				xmlns:local="*"
				minWidth="300">
	<mx:Style source="styles.css"/>
	<resources:Resources id="res"/>
	<mx:HTTPService id="googleRequest"
					showBusyCursor="true"
					useProxy="false"
					method="GET"
					resultFormat="text"
					result="{googleResultsHandler(event)}"/>
	<mx:HTTPService id="amazonRequest"
					showBusyCursor="true"
					useProxy="false"
					method="GET"
					resultFormat="text"
					result="{amazonResultsHandler(event)}"/>
	<mx:HTTPService id="translateRequest"
					showBusyCursor="true"
					useProxy="false"
					method="GET"
					resultFormat="text"
					result="{translateResultsHandler(event)}"/>
	<mx:HTTPService id="amazonSearch"
					url="http://ecs.amazonaws.com/onca/xml"
					showBusyCursor="true"
					result="{amazonSearchResultHandler(event)}">
		<mx:request>
			<Service>
				AWSECommerceService
			</Service>
			<Version>
				2009-03-31
			</Version>
			<Operation>
				ItemLookup
			</Operation>
			<ResponseGroup>
				OfferFull,VariationSummary
			</ResponseGroup>
			<Condition>
				All
			</Condition>
			<MerchantId>
				All
			</MerchantId>
		</mx:request>
	</mx:HTTPService>

	<mx:VBox width="95%"
			 height="100%"
			 backgroundColor="white"
			 paddingLeft="0">
		<mx:HBox>
			<mx:ComboBox id="categoryCbx"
						 prompt="Category"
						 width="100"
						 height="15"
						 dropdownWidth="200"
						 dataProvider="{res.categories}"/>
			<mx:ComboBox id="countryComboBox"
						 prompt="Country"
						 width="100"
						 height="15"
						 dropdownWidth="200"
						 dataProvider="{res.countries}"
						 change="{searchDTO?searchDTO.searchItems.refresh():{}}"/>
			<mx:ComboBox id="langFromCbx"
						 prompt="Language"
						 height="15"
						 dataProvider="{res.langs}"/>
		</mx:HBox>
		<mx:HBox width="100%"
				 paddingRight="10">
			<mx:TextInput width="100%"
						  height="18"
						  id="keywordTextInput"
						  change="{}"/>
			<mx:Button label="Translate"
					   height="18"
					   enabled="{langFromCbx.selectedIndex>0}"
					   click="{translate()}"/>
			<mx:Button label="Search"
					   height="18"
					   styleName="alarmButton"
					   click="{findGoogleResults()}"/>
		</mx:HBox>
		<mx:Repeater id="rep"
					 dataProvider="{searchDTO.searchItems}">
			<mx:HBox width="100%">
				<mx:Image source="{SearchItemDTO(rep.currentItem).imgSrc}"
						  width="70"/>
				<mx:VBox width="80%">
					<mx:Text width="100%"
							 useHandCursor="true"
							 textDecoration="underline"
							 buttonMode="true"
							 mouseChildren="false"
							 color="blue"
							 htmlText="{getTitle(SearchItemDTO(rep.currentItem))}"
							 click="{openAmazonItem(SearchItemDTO(event.currentTarget.getRepeaterItem()))}"/>
					<mx:Text width="100%"
							 htmlText="{getDescription(SearchItemDTO(rep.currentItem))}"/>
					<mx:Label htmlText="{getPriceRating(SearchItemDTO(rep.currentItem))}"/>
					<local:CheckAvailabilityBox dataProvider="{SearchItemDTO(rep.currentItem)}"
												region="{countryComboBox.selectedItem.region}"/>
				</mx:VBox>
			</mx:HBox>
		</mx:Repeater>
	</mx:VBox>
	<mx:Script>
		<![CDATA[
			import dto.OfferDTO;
			import mx.collections.ArrayCollection;
			import mx.utils.ObjectProxy;
			import mx.utils.ObjectUtil;
			import services.Helper;
			import mx.rpc.AsyncToken;
			import dto.SearchDTO;
			import dto.SearchItemDTO;
			import com.adobe.serialization.json.JSON;
			import mx.rpc.events.ResultEvent;
			[Bindable]
			private var page:String="0";
			[Bindable]
			private var keyword:String="";
			[Bindable]
			private var searchDTO:SearchDTO;


			private function findGoogleResults():void
			{
				googleRequest.url=Helper.createGoogleSearchAmazonURL(page, keywordTextInput.text ? keywordTextInput.text : "", categoryCbx.value ? categoryCbx.selectedItem.label : "");
				googleRequest.send();
			}

			private function googleResultsHandler(event:ResultEvent):void
			{
				searchDTO=Helper.parseGoogleResults(event);
				amazonRequest.url=Helper.createAmazonURL(searchDTO);
				amazonRequest.send();
				amazonSearch.request.ItemId=Helper.createASINs(searchDTO);
				Helper.generateSignature(amazonSearch.request);
				amazonSearch.send();
			}

			private function amazonResultsHandler(event:ResultEvent):void
			{
				var rawData:String=String(event.result);
				searchDTO=Helper.parseAmazonResults(searchDTO, rawData);
				searchDTO.searchItems.refresh();
			}

			private function translateResultsHandler(event:ResultEvent):void
			{
				keywordTextInput.text=Helper.parseTranslateResults(event);
			}

			private function getTitle(item:SearchItemDTO):String
			{
				var res:String=item.name;
				return res;
			}

			private function getDescription(item:SearchItemDTO):String
			{
				var res:String=item.description;
				return res;
			}

			private function getPriceRating(item:SearchItemDTO):String
			{
				var price:String=item.price ? '<b>Price:' + item.price + "</b>" : "";
				var rating:String=item.rating ? '<b>Rating:' + item.rating + "</b>" : "";
				if (price)
				{
					return price + " " + rating;
				}
				else
				{
					return rating;
				}
			}

			private function openAmazonItem(item:SearchItemDTO):void
			{
				var urlRequest:URLRequest=new URLRequest(item.url);
				navigateToURL(urlRequest, '_blank');
			}

			private function translate():void
			{
				translateRequest.url=Helper.createTranslateURL(keywordTextInput.text, String(langFromCbx.selectedItem.value), "en");
				translateRequest.send();
			}

			private function amazonSearchResultHandler(event:ResultEvent):void
			{
				var raw:Object=event.result.ItemLookupResponse.Items.Item;
				if (raw is ArrayCollection)
				{
					searchDTO=Helper.parseAmazonSearchResults(searchDTO, ArrayCollection(raw));
				}
				else if (raw)
				{
					searchDTO=Helper.parseAmazonSearchResults(searchDTO, new ArrayCollection([raw]));
				}
				searchDTO.searchItems.refresh();
			}
		]]>
	</mx:Script>
</mx:Application>
