<?xml version="1.0" encoding="utf-8"?>
<services:BaseService xmlns:mx="http://www.adobe.com/2006/mxml"
					  xmlns:services="services.*">
	<mx:Metadata>
		[Event (name="result", type="flash.events.Event")]
	</mx:Metadata>
	<mx:HTTPService id="serv" 
					url="{'http://www.amazon.com/gp/offer-listing/B003QR0IA6/ref=dp_olp_new?ie=UTF8&amp;condition=new'}"
					result="serv_resultHandler(event)"
					method="get"
					resultFormat="text"/>
	<mx:RemoteObject id="ro" 
					 destination="amazon.check.shipping.OfferService" 
					 result="ro_resultHandler(event)"
					 fault="ro_faultHandler(event)"/>
	<mx:HTTPService id="amazonSearch"
					url="http://ecs.amazonaws.{Helper.getAWSDomain()}/onca/xml"
					showBusyCursor="true"
					result="{amazonSearchResultHandler(event)}">
		<mx:request>
			<Service>
				AWSECommerceService
			</Service>
			<Version>
				2009-03-31
			</Version>
			<Operation>
				ItemLookup
			</Operation>
			<ResponseGroup>
				ItemAttributes,OfferFull,VariationSummary
			</ResponseGroup>
			<Condition>
				All
			</Condition>
			<MerchantId>
				All
			</MerchantId>
			<OfferPage>
				{currentOfferPage?currentOfferPage:1}
			</OfferPage>
		</mx:request>
	</mx:HTTPService>
	<mx:Script>
		<![CDATA[
			import dto.SearchDTO;
			
			import flash.events.EventDispatcher;
			import flash.utils.clearInterval;
			import flash.utils.setInterval;
			
			import mx.collections.ArrayCollection;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;

			[Bindable]
			public var searchDTO:SearchDTO;
			[Bindable]
			public var currentOfferPage:int;
			
			private var intervalId:uint;

			public function sendRequest():void {
				if (searchDTO && searchDTO.searchItems && searchDTO.searchItems.length == 1) {
					ro.getItem (Helper.createASINs(searchDTO), Helper.getAWSDomain(), currentOfferPage);
					ExternalInterface.call("makeTestFrame");
					intervalId = setInterval(getIFrameContent, 100);
					//serv.send();
				} else {
					amazonSearch.request.ItemId=Helper.createASINs(searchDTO);
					Helper.generateSignature(amazonSearch.request);
					amazonSearch.send();
				}
			}
			
			private function getIFrameContent():void {
				var content:String = ExternalInterface.call("getTestFrameContent");
				if (content) {
					if (intervalId) {
						clearInterval(intervalId);
					}
					var obj:Object = ExternalInterface.call("getPersonObject");
					trace (content);
					
				}
			} 

			private function amazonSearchResultHandler(event:ResultEvent):void {
				var raw:Object=event.result.ItemLookupResponse.Items.Item;
				if (raw is ArrayCollection) {
					Helper.parseAmazonSearchResults(searchDTO, ArrayCollection(raw));
					dispatchEvent(new Event("result"));
				} else if (raw) {
					Helper.parseAmazonSearchResults(searchDTO, new ArrayCollection([raw]));
					
				}
				
			}
			protected function ro_resultHandler(event:ResultEvent):void
			{
				//trace(event.result);
				var raw:Object=event.result;
				raw.DetailPageURL = "http://amazon."+Helper.getAWSDomain()+"/dp/"+raw.ASIN+
				"%3FSubscriptionId%3D%26tag%3D"+Helper.getTag()+"%26linkCode%3D%26camp%3D%26creative%3D%26creativeASIN%3D"+raw.ASIN;
				Helper.parseAmazonSearchResults(searchDTO, new ArrayCollection([raw]));
				dispatchEvent(new Event("result"));
			}
			
			protected function ro_faultHandler(event:FaultEvent):void
			{
				//trace(event.fault);
			}
			
			protected function serv_resultHandler(event:ResultEvent):void
			{
				trace(event.result);				
			}
			
		]]>
	</mx:Script>
</services:BaseService>
