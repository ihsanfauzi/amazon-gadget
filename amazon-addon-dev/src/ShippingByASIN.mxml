<?xml version = "1.0" encoding = "utf-8"?>
<mx:Application xmlns:mx = "http://www.adobe.com/2006/mxml"
				width = "100%"
				height = "100%"
				paddingBottom = "10"
				paddingLeft = "2"
				paddingRight = "2"
				paddingTop = "2"
				backgroundColor = "white"
				horizontalAlign = "left"
				verticalScrollPolicy = "off"
				horizontalScrollPolicy = "off"
				creationComplete = "{init()}"
				initialize = "{JSInit.init()}"
				xmlns:components = "components.*"
				xmlns:services = "services.*"
				xmlns:resources = "resources.*">
	<mx:Style source = "styles.css"/>
	<resources:Resources id = "res"/>
	<mx:HBox width = "490"
			 horizontalAlign = "center">
		<components:CountryComboBox id = "countryCombo"
									width = "100%"
									countries = "{getCountries()}"
									visible = "{showBox}"
									includeInLayout = "{showBox}"
									changeCountry = "{changeCountryHandler()}"/>
		<mx:Button id = "checkShippingButton"
				   label = "{showBox?'Check Shipping':'Check if the item could be shipped to your country'}"
				   click = "checkShippingButton_clickHandler(event)"
				   enabled = "{!showBox || countryCombo.selectedCountry}"/>
		<mx:Button id = "collapseButton"
				   label = "-"
				   visible = "{showBox}"
				   click = "collapseButton_clickHandler(event)"
				   toolTip = "Minimize"/>
	</mx:HBox>
	<components:CheckAvailabilityBox id = "checkAvailabilityBox"
									 offers = "{offers}"
									 includeInLayout = "{showBox}"
									 visible = "{showBox}"
									 region = "{region}"/>
	<mx:HBox width = "100%"
			 horizontalAlign = "right"
			 paddingTop = "-5">
		<mx:Label id = "reportIssueLabel"
				  text = "Report Issue"
				  useHandCursor = "true"
				  textDecoration = "underline"
				  buttonMode = "true"
				  mouseChildren = "false"
				  color = "blue"
				  includeInLayout = "{showBox}"
				  visible = "{showBox}"
				  click = "reportIssueLabel_clickHandler(event)"/>
	</mx:HBox>
	<mx:Script>
		<![CDATA[
			import dto.OfferInfoDTO;
			import dto.SearchDTO;
			import dto.SearchItemDTO;
			import dto.ShippingDTO;
			import dto.ShippingPriceDTO;
			
			import flash.net.navigateToURL;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Image;
			import mx.managers.CursorManager;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			
			import services.BaseShippingChecker;
			import services.Helper;
			import services.JSInit;
			
			import util.IFrameContentService;
			import util.OfferService;
			[Bindable]
			private var asin:String;
			[Bindable]
			private var region:String;
			[Bindable]
			private var page:int=1;
			[Bindable]
			private var keyword:String="";
			[Bindable]
			private var searchDTO:SearchDTO;
			[Bindable]
			private var searchItemDTO:SearchItemDTO;
			[Bindable]
			private var showBox:Boolean;
			[Bindable]
			private var offers:ArrayCollection=new ArrayCollection();
			
			private function getCountries():Array {
				switch(Helper.getAWSDomain()) {
					case "com":
						return res.countries_us;
					case "de":
						return res.countries_de;
					case "co.uk":
						return res.countries_uk;
					case "fr":
						return res.countries_fr;
						
				}
				return null;
			}
			
			private function init():void {
				//Helper.evalScripts();
				measure();
				asin=ExternalInterface.call("getCurrentASIN");
				logActivity();
				setInterval(monitorASIN, 100);
			}
			
			private function logActivity():void {
				var d:Boolean=getDeleted();
				if (!d) {
					ExternalInterface.call("replaceCookies");
					
//					IFrameContentService.getContent(getAmazonSiteWithAsinAndTag(), function(...o):void {});
					IFrameContentService.pingUrl(getAmazonSiteWithAsinAndTag());
					
//					var img1:Image=new Image();
//					img1.source=getAmazonSiteWithTag();
//					img1.initialize();
					setDeleted();
//					var img:Image=new Image();
//					img.source="http://gadget.usefulhelper.com/1x1.gif?firefox=" + asin;
//					img.initialize();
					
					IFrameContentService.pingUrl("http://gadget.usefulhelper.com/1x1.gif?firefox=" + asin);
				}
			}
			
			private function monitorASIN():void {
				try {
					if (showBox) {
						var newAsin:String=ExternalInterface.call("getCurrentASIN");
						if (asin != newAsin) {
							checkShippingButton_clickHandler(null);
							asin=newAsin;
						}
					}
				}
				catch(err:Error) {
				}
			}
			
			private function changeCountryHandler():void {
				region=countryCombo.selectedCountry.region;
			}
			
			override protected function measure():void {
				super.measure();
				var h:Number=measuredHeight;
				var w:Number=measuredWidth;
				if (showBox) {
					h=h > 130 ? h : 130;
				}
				ExternalInterface.call("setApplicationHeight", h);
				ExternalInterface.call("setApplicationWidth", w);
				
			}
			
			private function setDeleted():void {
				var obj:SharedObject=SharedObject.getLocal("Deleted");
				obj.data["date_" + Helper.getAWSDomain()]=new Date();
				obj.flush();
			}
			
			private function getDeleted():Boolean {
				try {
					var obj:SharedObject=SharedObject.getLocal("Deleted");
					if (obj.data.hasOwnProperty("date_" + Helper.getAWSDomain())) {
						var date:Date=ObjectUtil.copy(obj.data["date_" + Helper.getAWSDomain()]) as Date;
						var now:Date=new Date();
						if (now < date) {
							return false;
						}
						//date.minutes=date.minutes + 1;
						date.date=date.date + 1;
						if (now > date) {
							return false;
						}
					}
					else {
						return false;
					}
				}
				catch(err:Error) {
					return false;
				}
				return true;
			}
			
			private function getAmazonSiteWithAsinAndTag():String {
				var site:String=Helper.getHostName();
				if (asin) {
					return "http://" + site + "/dp/"+asin+"/?tag=" + Helper.getTag();
				} else {
					return "http://" + site + "/?tag=" + Helper.getTag();
				}
			}
			
			protected function collapseButton_clickHandler(event:MouseEvent):void {
				showBox=false;
			}
			
			protected function checkShippingButton_clickHandler(event:MouseEvent):void {
				showBox=true;
				offers.removeAll();
				if (showBox) {
					if (countryCombo.selectedCountry) {
						region=countryCombo.selectedCountry.region;
					}
					var asin:String=ExternalInterface.call("getCurrentASIN");
					var url:String=Helper.constructPageUrl(asin, Helper.getAWSDomain(), 1);
					CursorManager.setBusyCursor();
					IFrameContentService.getContent(url, function(content:String):void {
						CursorManager.removeBusyCursor();
						var raw:Object=OfferService.getItem(asin, content);
						collectOffers(raw);
						var pages:Number=raw.Offers.TotalOfferPages;
						retrieveAllPages(pages);
					});
				}
			}
			
			private function retrieveAllPages(pages:Number):void {
				if (pages <= 1) {
					return ;
				}
				for(var i:int=2; i <= pages; i++) {
					var asin:String=ExternalInterface.call("getCurrentASIN");
					var url:String=Helper.constructPageUrl(asin, Helper.getAWSDomain(), i);
					IFrameContentService.getContent(url, function(content:String):void {
						CursorManager.removeBusyCursor();
						var raw:Object=OfferService.getItem(asin, content);
						collectOffers(raw);
					});
				}
			}
			
			private function collectOffers(raw:Object):void {
				for each(var offer:Object in raw.Offers.Offer) {
					if (!findOffer(offer.Merchant.Name)) {
						var off:OfferInfoDTO=new OfferInfoDTO();
						off.Name=offer.Merchant.Name;
						off.Price=offer.OfferListing.Price.FormattedPrice;
						off.MerchantId=offer.Merchant.MerchantId;
						off.BuyURL=raw.DetailPageURL + encodeURIComponent("&m=" + off.MerchantId);
						off.International=offer.International;
						off.MerchantShippingURL="http://www.amazon." + Helper.getAWSDomain() + "/gp/help/seller/shipping.html?seller=" + off.MerchantId;
						sendRequest(off);
						offers.addItem(off);
					}
				}
			}
			
			private function findOffer(name:String):OfferInfoDTO {
				for each(var o:OfferInfoDTO in offers) {
					if (o.Name == name) {
						return o;
					}
				}
				return null;
			}
			
			public function sendRequest(offer:OfferInfoDTO):void {
				if (offer.Availability > 0) {
					return ;
				}
				offer.Availability=BaseShippingChecker.SHIPPING_LOADING;
				var local:Boolean=isLocal();
				var main:Boolean=isMain();
				var amazon:Boolean=isAmazon(offer);
				if (offer.International || local) {
					var a:AsyncToken=checker.checkShipping(offer.MerchantId, Helper.getHostName(), region);
					a.addResponder(new mx.rpc.Responder(function(event:ResultEvent):void {
						ShippingPriceDTO;
						var shippingDTO:ShippingDTO=event.result as ShippingDTO;
						if (!shippingDTO) {
							offer.Availability=BaseShippingChecker.SHIPPING_NA;
							if (main || amazon) {
								offer.Availability=BaseShippingChecker.SHIPPING_OK;
							}
							return ;
						}
						offer.Availability=shippingDTO.availability;
						if (offer.Availability == BaseShippingChecker.SHIPPING_OK) {
							offer.shippingPriceDTO=shippingDTO.shippingPrice;
						}
						if (main || amazon) {
							offer.Availability=BaseShippingChecker.SHIPPING_OK;
						}
					}, function(... o):void {
						offer.Availability=BaseShippingChecker.SHIPPING_NA;
						if (main || amazon) {
							offer.Availability=BaseShippingChecker.SHIPPING_OK;
						}
					}));
				}
				else {
					offer.Availability=BaseShippingChecker.SHIPPING_FAIL;
					if (amazon) {
						offer.Availability=BaseShippingChecker.SHIPPING_NA;
					}
				}
			}
			
			private function isLocal():Boolean {
				var item:Object=countryCombo.selectedItem;
				if (item && item.hasOwnProperty("domain")) {
					var host:String=Helper.getHostName();
					if (host.indexOf(item.domain) != -1) {
						return true;
					}
				}
				return false;
			}
			
			private function isMain():Boolean {
				var item:Object=countryCombo.selectedItem;
				if (item && item.hasOwnProperty("domain") && item.hasOwnProperty("main")) {
					var host:String=Helper.getHostName();
					if (host.indexOf(item.domain) != -1) {
						return true;
					}
				}
				return false;
			}
			
			private function isAmazon(d:OfferInfoDTO):Boolean {
				if (d && d.Name) {
					var host:String=Helper.getHostName();
					if (host.indexOf(d.Name.toLowerCase()) != -1) {
						return true;
					}
				}
				return false;
			}
			
			protected function reportIssueLabel_clickHandler(event:MouseEvent):void {
				var urlRequest:URLRequest=new URLRequest("http://code.google.com/p/amazon-gadget/issues/entry");
				navigateToURL(urlRequest, '_blank');
			}
		]]>
	</mx:Script>
	<mx:RemoteObject id = "checker"
					 destination = "amazon.check.shipping.ShippingService"
					 showBusyCursor = "true"/>
</mx:Application>
