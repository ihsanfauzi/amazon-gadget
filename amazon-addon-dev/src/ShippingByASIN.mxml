<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
				width="100%"
				height="100%"
				paddingBottom="10"
				paddingLeft="2"
				paddingRight="2"
				paddingTop="2"
				backgroundColor="white"
				horizontalAlign="left"
				verticalScrollPolicy="off"
				horizontalScrollPolicy="off"
				creationComplete="{init();}"
				initialize="{JSInit.init()}"
				xmlns:components="components.*"
				xmlns:services="services.*"
				xmlns:resources="resources.*">
	<mx:Style source="styles.css"/>
	<resources:Resources id="res"/>
	<mx:HBox width="490"
			 horizontalAlign="center"
			 horizontalScrollPolicy="off">
		<components:CountryComboBox id="countryCombo"
									width="305"
									countries="{getCountries()}"
									visible="{showBox}"
									includeInLayout="{showBox}"
									changeCountry="{changeCountryHandler()}"/>
		<mx:CheckBox id="newCheckBox"
					 toolTip="New Items"
					 selected="true"
					 visible="{showBox}"
					 includeInLayout="{showBox}"
					 change="conditionCheckBox_changeHandler(event)"/>
		<mx:Box backgroundAlpha="0.3"
				backgroundColor="red"
				paddingLeft="1"
				paddingRight="1">
			<mx:CheckBox id="usedCheckBox"
						 toolTip="Used Items"
						 selected="true"
						 visible="{showBox}"
						 includeInLayout="{showBox}"
						 change="conditionCheckBox_changeHandler(event)"/>
		</mx:Box>
		<mx:Box backgroundAlpha="0.3"
				backgroundColor="green"
				paddingLeft="1"
				paddingRight="1">
			<mx:CheckBox id="refurbishedCheckBox"
						 toolTip="Refurbished Items"
						 selected="true"
						 visible="{showBox}"
						 includeInLayout="{showBox}"
						 change="conditionCheckBox_changeHandler(event)"/>
		</mx:Box>
		<mx:Button id="checkShippingButton"
				   label="{showBox?'Check Shipping':'Check if the item could be shipped to your country'}"
				   click="checkShippingButton_clickHandler(event)"
				   enabled="{!showBox || countryCombo.selectedCountry}"/>
		<mx:Button id="collapseButton"
				   width="10"
				   label="-"
				   visible="{showBox}"
				   click="collapseButton_clickHandler(event)"
				   toolTip="Minimize"/>
	</mx:HBox>
	<components:CheckAvailabilityBox id="checkAvailabilityBox"
									 offers="{offers}"
									 includeInLayout="{showBox}"
									 visible="{showBox}"
									 region="{region}"/>
	<mx:HBox width="100%">
		<mx:HBox width="100%"
				 horizontalAlign="left"
				 paddingTop="-5"
				 horizontalGap="-2">
			<mx:Label text="NEW!"
					  color="red"/>
			<mx:Label id="aliamazLabel"
					  text="Search products in your native language"
					  useHandCursor="true"
					  textDecoration="underline"
					  buttonMode="true"
					  mouseChildren="false"
					  color="blue"
					  fontWeight="bold"
					  click="aliamazLabel_clickHandler(event)"/>
		</mx:HBox>
		<mx:HBox width="100%"
				 horizontalAlign="right"
				 paddingTop="-5">
			<mx:Label id="aliLabel"
					  text="Compare on AliExpress"
					  useHandCursor="true"
					  textDecoration="underline"
					  buttonMode="true"
					  mouseChildren="false"
					  color="blue"
					  fontWeight="bold"
					  click="aliLabel_clickHandler(event)"/>
			<!-- mx:Label id="androidLabel"
					  text="Get on Your Android"
					  useHandCursor="true"
					  textDecoration="underline"
					  buttonMode="true"
					  mouseChildren="false"
					  color="blue"
					  click="androidLabel_clickHandler(event)"/-->
			<mx:Label id="reportIssueLabel"
					  text="Report Issue"
					  useHandCursor="true"
					  textDecoration="underline"
					  buttonMode="true"
					  mouseChildren="false"
					  color="blue"
					  includeInLayout="{showBox}"
					  visible="{showBox}"
					  click="reportIssueLabel_clickHandler(event)"/>
		</mx:HBox>
	</mx:HBox>
	<mx:Script>
		<![CDATA[
			import dto.OfferInfoDTO;
			import dto.SearchDTO;
			import dto.SearchItemDTO;
			import dto.ShippingDTO;
			import dto.ShippingPriceDTO;
			
			import flash.net.navigateToURL;
			import flash.utils.setTimeout;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Image;
			import mx.events.DragEvent;
			import mx.managers.CursorManager;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			import mx.utils.StringUtil;
			
			import services.BaseShippingChecker;
			import services.Helper;
			import services.JSInit;
			
			import util.IFrameContentService;
			import util.OfferService;
			import util.OfferServiceChrome;
			
			import utils.GAHelper;
			
			public static const VERSION:String="2012.09.19.2";
			
			[Bindable]
			private var asin:String;
			[Bindable]
			private var oldstr:String;
			[Bindable]
			private var region:String;
			[Bindable]
			private var page:int=1;
			[Bindable]
			private var keyword:String="";
			[Bindable]
			private var searchDTO:SearchDTO;
			[Bindable]
			private var searchItemDTO:SearchItemDTO;
			[Bindable]
			private var showBox:Boolean;
			[Bindable]
			private var offers:ArrayCollection=new ArrayCollection();
			
			private function getCountries():Array {
				switch(Helper.getAWSDomain()) {
					case "com":
						return res.countries_us;
					case "de":
						return res.countries_de;
					case "co.uk":
						return res.countries_uk;
					case "fr":
						return res.countries_fr;
						
				}
				return null;
			}
			
			private function init():void {
				//Helper.evalScripts();
				GAHelper.trackPageView(ExternalInterface.call("window.location.href.toString"));
				measure();
				asin=ExternalInterface.call("getCurrentASIN");
				logActivity();
				setInterval(monitorASIN, 100);
			}
			
			private function logActivity():void {
				if(!Helper.isSharedObjectOk()) {
					GAHelper.trackEvent("SharedObject Error");
					return;
				}
			}
			
			private function monitorASIN():void {
				try {
					if (showBox) {
						var newAsin:String=ExternalInterface.call("getCurrentASIN");
						if (asin != newAsin) {
							checkShippingButton_clickHandler(null);
							asin=newAsin;
						}
					}
				}
				catch(err:Error) {
				}
			}
			
			private function changeCountryHandler():void {
				region=countryCombo.selectedCountry.region;
			}
			
			override protected function measure():void {
				super.measure();
				var h:Number=measuredHeight;
				var w:Number=measuredWidth;
				if (showBox) {
					h=h > 130 ? h : 130;
				}
				ExternalInterface.call("setApplicationHeight", h + "px");
				ExternalInterface.call("setApplicationWidth", w + "px");
				ExternalInterface.call("setApplicationDisplay", "table");
			}
			
			private function setDeleted():void {
				var obj:SharedObject=SharedObject.getLocal("Deleted", "/");
				obj.data["date_" + Helper.getAWSDomain()]=new Date();
				obj.flush();
			}
			
			private function checkSharedObject():String {
				try {
					var checkStr:String="Check";
					var obj:SharedObject=SharedObject.getLocal(checkStr);
					obj.data["date_" + Helper.getAWSDomain()]=new Date();
					obj.flush();
					obj=SharedObject.getLocal(checkStr);
					var d:Date=obj.data["date_" + Helper.getAWSDomain()]as Date;
					return d ? d.toString() : "date_null";
				}
				catch(e:Error) {
					return "error:" + e.message;
				}
				return null;
			}
			
			private function getDeletedDate():String {
				try {
					var obj:SharedObject=SharedObject.getLocal("Deleted", "/");
					if (obj.data.hasOwnProperty("date_" + Helper.getAWSDomain())) {
						var date:Date=ObjectUtil.copy(obj.data["date_" + Helper.getAWSDomain()])as Date;
						return date ? date.toString() : "nodate";
					}
					else {
						return "noprop_" + Helper.getAWSDomain();
					}
				}
				catch(e:Error) {
					return "error";
				}
				return null;
			}
			
			private function getDeleted():Boolean {
				try {
					var obj:SharedObject=SharedObject.getLocal("Deleted", "/");
					if (obj.data.hasOwnProperty("date_" + Helper.getAWSDomain())) {
						var date:Date=ObjectUtil.copy(obj.data["date_" + Helper.getAWSDomain()])as Date;
						var now:Date=new Date();
						if (now < date) {
							return false;
						}
						//date.minutes=date.minutes + 1;
						//date.date=date.date + 1;
						date.hours=date.hours + 20;
						if (now > date) {
							return false;
						}
					}
					else {
						return false;
					}
				}
				catch(err:Error) {
					return false;
				}
				return true;
			}
			
			private function getAmazonSiteWithAsinAndTag():String {
				var site:String=Helper.getHostName();
				if (asin) {
					return "http://" + site + "/dp/" + asin + "/?tag=" + Helper.getTag(false) + "&ff=true";
					//return "http://amazon." + Helper.getAWSDomain() + "/dp/" + asin + "%3FSubscriptionId%3D%26tag%3D" + Helper.getTag(false) + "%26linkCode%3D%26camp%3D%26creative%3D%26creativeASIN%3D" + asin;
				} else {
					return "http://" + site + "/?tag=" + Helper.getTag(false) + "&ff=true";
				}
			}
			
			protected function collapseButton_clickHandler(event:MouseEvent):void {
				showBox=false;
			}
			
			protected function checkShippingButton_clickHandler(event:MouseEvent):void {
				var asin:String=ExternalInterface.call("getCurrentASIN");
				if (countryCombo.selectedCountry) {
					var country:String=countryCombo.selectedCountry.value;
				}
				GAHelper.trackEvent("Check Shipping", country + ":" + asin);
				if (!countryCombo.selectedCountry) {
					GAHelper.trackEvent("First Time");
				}
				
				showBox=true;
				offers.removeAll();
				if (countryCombo.selectedCountry) {
					region=countryCombo.selectedCountry.region;
					retrieveAllPages(Helper.CONDITION_NEW);
					retrieveAllPages(Helper.CONDITION_USED);
					retrieveAllPages(Helper.CONDITION_REFURBISHED);
				}
			}
			
			private function retrieveAllPages(condition:String):void {
				var asin:String=ExternalInterface.call("getCurrentASIN");
				var url:String=Helper.constructPageUrl(asin, Helper.getAWSDomain(), 1, condition);
				CursorManager.setBusyCursor();
				IFrameContentService.getContent(url, function(content:String):void {
					CursorManager.removeBusyCursor();
//					if (condition = Helper.CONDITION_NEW) {
//						trace(content);
//					}
					var raw:Object=OfferService.getItem(asin, content);
					collectOffers(raw, condition);
					var pages:Number=raw.Offers.TotalOfferPages;
					retrieveRestPages(pages, condition);
				});
			}
			
			private function retrieveRestPages(pages:Number, condition:String):void {
				if (pages <= 1) {
					return ;
				}
				for(var i:int=2; i <= pages; i++) {
					var asin:String=ExternalInterface.call("getCurrentASIN");
					var url:String=Helper.constructPageUrl(asin, Helper.getAWSDomain(), i, condition);
					IFrameContentService.getContent(url, function(content:String):void {
						CursorManager.removeBusyCursor();
						var raw:Object=OfferService.getItem(asin, content);
						collectOffers(raw, condition);
					});
				}
			}
			
			private function collectOffers(raw:Object, condition:String):void {
				for each(var offer:Object in raw.Offers.Offer) {
					//if (!findOffer(offer.Merchant.Name)) {
					var off:OfferInfoDTO=new OfferInfoDTO();
					off.Condition=condition;
					off.Name=offer.Merchant.Name;
					off.Price=offer.OfferListing.Price.FormattedPrice;
					off.MerchantId=offer.Merchant.MerchantId;
					off.BuyURL=raw.DetailPageURL + encodeURIComponent("&m=" + off.MerchantId);
					off.International=offer.International;
					off.FulfilledByAmazon=offer.FulfilledByAmazon;
					off.MerchantShippingURL="http://www.amazon." + Helper.getAWSDomain() + "/gp/help/seller/shipping.html?seller=" + off.MerchantId;
					sendRequest(off);
					offers.addItem(off);
					//}
				}
			}
			
			private function findOffer(name:String):OfferInfoDTO {
				for each(var o:OfferInfoDTO in offers) {
					if (o.Name == name) {
						return o;
					}
				}
				return null;
			}
			
			public function sendRequest(offer:OfferInfoDTO):void {
				if (offer.Availability > 0) {
					return ;
				}
				offer.Availability=BaseShippingChecker.SHIPPING_LOADING;
				var local:Boolean=isLocal();
				var main:Boolean=isMain();
				var amazon:Boolean=isAmazon(offer);
				if (offer.International || local) {
					var a:AsyncToken=checker.checkShipping(offer.MerchantId, Helper.getHostName(), region);
					a.addResponder(new mx.rpc.Responder(function(event:ResultEvent):void {
						ShippingPriceDTO;
						var shippingDTO:ShippingDTO=event.result as ShippingDTO;
						if (!shippingDTO) {
							offer.Availability=BaseShippingChecker.SHIPPING_NA;
							if (main || amazon) {
								offer.Availability=BaseShippingChecker.SHIPPING_OK;
							}
							return ;
						}
						offer.Availability=shippingDTO.availability;
						if (offer.Availability == BaseShippingChecker.SHIPPING_OK) {
							offer.shippingPriceDTO=shippingDTO.shippingPrice;
						}
						if (main || amazon) {
							offer.Availability=BaseShippingChecker.SHIPPING_OK;
						}
					}, function(... o):void {
						offer.Availability=BaseShippingChecker.SHIPPING_NA;
						if (main || amazon) {
							offer.Availability=BaseShippingChecker.SHIPPING_OK;
						}
					}));
				}
				else {
					offer.Availability=BaseShippingChecker.SHIPPING_FAIL;
					if (amazon) {
						offer.Availability=BaseShippingChecker.SHIPPING_NA;
					}
				}
			}
			
			private function isLocal():Boolean {
				var item:Object=countryCombo.selectedItem;
				if (item && item.hasOwnProperty("domain")) {
					var host:String=Helper.getHostName();
					if (host.indexOf(item.domain) != -1) {
						return true;
					}
				}
				return false;
			}
			
			private function isMain():Boolean {
				var item:Object=countryCombo.selectedItem;
				if (item && item.hasOwnProperty("domain") && item.hasOwnProperty("main")) {
					var host:String=Helper.getHostName();
					if (host.indexOf(item.domain) != -1) {
						return true;
					}
				}
				return false;
			}
			
			private function isAmazon(d:OfferInfoDTO):Boolean {
				if (d.FulfilledByAmazon) {
					return true;
				}
				if (!d.MerchantId) {
					return true;
				}
				var amazonIDs:Array = ["ATVPDKIKX0DER",""];
				if (new ArrayCollection(amazonIDs).getItemIndex(d.MerchantId) != -1) {
					return true;
				}
				if (d && d.Name) {
					var host:String=Helper.getHostName();
					if (d.Name && d.Name.indexOf("http://") != 0 && (host.indexOf(d.Name.toLowerCase()) != -1 || d.Name.toLowerCase().indexOf('amazon') !=-1)) {
						return true;
					}
				}
				return false;
			}
			
			protected function reportIssueLabel_clickHandler(event:MouseEvent):void {
				var urlRequest:URLRequest=new URLRequest("http://code.google.com/p/amazon-gadget/issues/entry");
				navigateToURL(urlRequest, '_blank');
			}
			
			protected function conditionCheckBox_changeHandler(event:Event):void {
				if (offers) {
					offers.filterFunction=offersFilterFunction;
					offers.refresh();
				}
			}
			
			private function offersFilterFunction(item:OfferInfoDTO):Boolean {
				if (item.Condition == Helper.CONDITION_NEW) {
					return newCheckBox.selected;
				}
				if (item.Condition == Helper.CONDITION_REFURBISHED) {
					return refurbishedCheckBox.selected;
				}
				if (item.Condition == Helper.CONDITION_USED) {
					return usedCheckBox.selected;
				}
				return false;
			}
			
			protected function androidLabel_clickHandler(event:MouseEvent):void {
				var urlRequest:URLRequest=new URLRequest("https://play.google.com/store/apps/details?id=air.CheckShippingBrowserApp");
				navigateToURL(urlRequest, '_blank');
				GAHelper.trackEvent("Click Android");
			}

			protected function aliLabel_clickHandler(event:MouseEvent):void {
				var url:String = "http://www.aliexpress.com/wholesale?SearchText=" + encodeURI(ExternalInterface.call("getDocumentTitle"));
				Helper.openAmazonItem(url);
				GAHelper.trackEvent("Click Ali", ExternalInterface.call("getDocumentTitle"));
			}
			
			protected function aliamazLabel_clickHandler(event:MouseEvent):void {
				var url:String = "http://aliamaz.com";
				Helper.openAmazonItem(url);
				GAHelper.trackEvent("Click Aliamaz");
			}
			

		]]>
	</mx:Script>
	<mx:RemoteObject id="checker"
					 destination="amazon.check.shipping.ShippingService"
					 showBusyCursor="true"/>
	<mx:SWFLoader source="Stats.swf" 
				  includeInLayout="false"
				  visible="false"/>
</mx:Application>
